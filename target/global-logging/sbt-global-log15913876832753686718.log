[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/services/immonetService/ImmonetCrawlHTML.java","languageId":"java","version":1,"text":"package services.immonetService;\n\nimport play.*;\n\nimport javax.inject.*;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.text.NumberFormat;\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FilterWriter;\nimport java.io.IOException;\nimport java.text.BreakIterator;\nimport java.text.DecimalFormat;\nimport java.text.NumberFormat;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport java.util.Scanner;\nimport java.util.Iterator;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.TimeoutException;\n\nimport services.immonetService.ImmonetREGEX;\nimport models.ExposeModel;\nimport dataBase.Insert_DB;\nimport controllers.ExposeController;\n\n\n\npublic class ImmonetCrawlHTML{\n\n    protected ArrayList<String> objectIdList;\n\n    // protected HashSet<String> hrefList;\n\n    // to find highest pagenumber. Otherwise i will get more pages than normaly are\n    // avaiable for one destrict or city\n    protected ArrayList<String> pageNumber;\n\n    // protected String pageNumber;\n\n    protected String immoNet_regex_objectId;\n\n    protected String immoNet_regex_cityCode;\n\n    protected String immoNet_regex_pageNumber;\n    \n    protected String immoNet_regex_price;\n    \n    protected String immoNet_regex_Auf_Anfrage;\n    \n    protected String immoNet_regex_squareMeter;\n\n    protected String immoNet_regex_selPrice;\n\n    protected String immoNet_regex_selRooms;\n\n    protected String immoNet_regex_rooms;\n\n    protected String immoNet_regex_pictureLink;\n\n    protected String immoNet_regex_pictureLink_2;\n\n\n\n    boolean matchFound_pictureLink_2;\n\n    boolean matchFound_pictureLink;\n    \n\n// URL-Stuff\n    protected static String cityName;\n\n    protected static String cityCode;\n\n    private static int highestPageNumber;\n\n\n\n// Expose-objects\n    private ExposeModel exposeModel;\n\n    private ArrayList<ExposeModel> exposesList;\n    \n    private ArrayList<String> selAreaIdList;\n    \n    private ArrayList<String> priceList;\n\n    private ArrayList<String> selPriceIdList;\n\n    private ArrayList<String> selRoomsIdList;\n\n    private ArrayList<String> livingSpaceList;\n\n    private ArrayList<String> linkList;\n\n    private ArrayList<String> roomsList;\n\n    private ArrayList<Double> average_price_per_squareMeter;\n\n    private ArrayList<String> pages;\n\n    private ArrayList<Double> priceWithoutPointList;\n\n    private ArrayList<String> pictureList;\n\n\n\n    public ImmonetCrawlHTML(){\n\n        immoNet_regex_objectId = new ImmonetREGEX().getREGEXobjectId();\n\n        immoNet_regex_cityCode = new ImmonetREGEX().getREGEXcityCode();\n\n        immoNet_regex_pageNumber = new ImmonetREGEX().getREGEXmaxPage();\n \n        immoNet_regex_price = new ImmonetREGEX().getREGEXprice();\n\n        immoNet_regex_Auf_Anfrage = new ImmonetREGEX().getREGEXanfrage();\n\n        immoNet_regex_squareMeter = new ImmonetREGEX().getREGEXsquareMeter();\n\n        immoNet_regex_selPrice = new ImmonetREGEX().getREGEXselPrice();\n\n        immoNet_regex_rooms = new ImmonetREGEX().getREGEXrooms();\n\n        immoNet_regex_selRooms = new ImmonetREGEX().getREGEXselRooms();\n\n        immoNet_regex_pictureLink = new ImmonetREGEX().getREGEXpictureLink();\n\n        immoNet_regex_pictureLink_2 = new ImmonetREGEX().getREGEXpictureLink_2();\n        \n\n        selAreaIdList = new ArrayList<String>();\n\n        selPriceIdList = new ArrayList<String>();\n\n        selRoomsIdList = new ArrayList<String>();\n       \n        objectIdList = new ArrayList<String>();\n        \n        pageNumber = new ArrayList<String>();\n\n        linkList = new ArrayList<String>();\n\n        priceList = new ArrayList<String>();\n\n        livingSpaceList = new ArrayList<String>();\n\n        roomsList = new ArrayList<String>();\n\n        pictureList = new ArrayList<String>();\n\n        average_price_per_squareMeter = new ArrayList<Double>();\n\n        priceWithoutPointList = new ArrayList<Double>();\n\n        pages = new ArrayList<String>();\n\n        exposesList = new ArrayList<ExposeModel>();\n\n    }\n\n    public int getHighestPageNumber(){\n        return highestPageNumber;\n    }\n\n    public String getCityCode(){\n        return cityCode;\n    }\n\n    // remove\n    public ExposeModel getExposeModelObject(){\n        return exposeModel;\n    }\n\n    // timeout(6000) -->\n    public void getPageLinks() throws ParseException {\n\n        try {\n\n            // ******************************** READ *********************************************/\n\n              String fileLocation = \"/home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/Crawler_PageContent_HTML.txt\";\n\n            BufferedReader br = null;\n\n            try {\n\n                br = new BufferedReader(new FileReader(fileLocation));\n                String line = null;\n                while ((line = br.readLine()) != null) {\n\n                    getHighestPagenumber(line);\n                }\n\n            } catch (FileNotFoundException e) {\n                \n                e.printStackTrace();\n            }\n            \n            try {\n                br.close();\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n            }\n\n\n            try {\n\n                br = new BufferedReader(new FileReader(fileLocation));\n                String line = null;\n                while ((line = br.readLine()) != null) {\n\n                    highestPageNumber();\n        \n                    getLinks(line);\n\n                    getCityNumber(line);\n\n                    getPrice(line);\n\n                    getAufAnfrage(line);\n\n                    getRooms(line);\n\n                    getSquareMeter(line);\n\n                    // getPictureLink(line);\n\n\n/* \n                    if(getPictureLink_1(line) == true){\n                        continue;\n                    }\n                    else\n                    {\n                        getPictureLink_2(line);\n                    }\n*/                    \n\n\n                }\n\n            } catch (FileNotFoundException e) {\n                \n                e.printStackTrace();\n            }\n            \n            try {\n                br.close();\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n            }\n\n\n            for (int id = 0; id < objectIdList.size(); id++) {\n\n                linkList.add(\"https://www.immonet.de/angebot/\" + objectIdList.get(id) + \"?drop=sel&related=false&product=immobooster\");\n            }\n\n//###############################################  selRooms-ID  ####################################################################################\n\n/*\nWenn 2 WohnObjekte auf einer Seite keine Zimmer angegeben haben :\n\n- Das erste WohnObjekt wird erkannt und richtig deklariert mit !keine Zimmer!\n\n- Das zweite WohnObjekt wird vllt auch erkannt, allerdings nicht richtig deklariert, sondern die ZimmerAnzahl\n  des darauf folgenden WohnObjektes eingetragen.\n  --> Somit verk√ºrzt sich die Liste um eins. Folge : \"Exit out of bounds\" weil alle anderen Listen um eins laenger sind. \n\n*/\n    \n                try {\n\n                    br = new BufferedReader(new FileReader(fileLocation));\n                    String line = null;\n                    while ((line = br.readLine()) != null) {\n\n                    \n                    // alle selPrice-ID's in eine Liste\n                    // Danach diese Liste mit objectIdList vergleichen\n                    // Listen sind sortiert. Index der fehlenden selPrice-ID geben bzw wo ein \"String\" eingetragen werden soll.\n                    for(int id = 0 ; id < objectIdList.size() ; id++){\n                             \n                        if ( line.indexOf(\"selRooms_\" + objectIdList.get(id))  != -1 ){\n\n                            selRoomsIdList.add(objectIdList.get(id)); \n                        }\n                    }\n\n                    for(int id = 0 ; id < objectIdList.size() ; id++){\n                        \n                        if ( line.indexOf(\"selArea_\" + objectIdList.get(id))  != -1 ){\n                    \n                             selAreaIdList.add(objectIdList.get(id)); \n                        }\n                    }   \n\n                    for(int id = 0 ; id < objectIdList.size() ; id++){\n\n                        if ( line.indexOf(\"selPrice_\" + objectIdList.get(id))  != -1 ){   \n                        \n                             selPriceIdList.add(objectIdList.get(id)); \n                        }\n                    }\n                }\n            \n                } catch (FileNotFoundException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n                }\n    \n                \n\n//################################################  selPrice-ID  #####################################################################################\n          \n//################################################  selArea-ID  ######################################################################################\n\n                            \n                for(int id = 0 ; id < objectIdList.size() ; id++){\n                    \n                    if( objectIdList.get(id) == selRoomsIdList.get(id)) continue;\n                    \n                        roomsList.add( id , \" !! keine Zimmeranzahl angegeben !!\" );\n                        \n                        selRoomsIdList.add( id ,objectIdList.get(id)); \n                }\n                \n\n                for(int id = 0 ; id < objectIdList.size() ; id++){\n                        \n                    if( objectIdList.get(id) == selPriceIdList.get(id)) continue;\n  \n                        priceList.add( id , \" !! kein Preis angegeben !!\" );\n                        \n                        selPriceIdList.add( id ,objectIdList.get(id));\n                        \n                }\n  \n                \n                for(int id = 0 ; id < objectIdList.size() ; id++){\n                    \n                    if( objectIdList.get(id) == selAreaIdList.get(id)) continue;\n                        \n                        livingSpaceList.add( id , \" !! keine Quadratmeter angegeben !!\" );\n                    \n                        selAreaIdList.add( id , objectIdList.get(id));\n                }\n\n//###################################################################################################################################\n\n            Insert_DB insert_DB =new Insert_DB();\n                \n                System.out.println(\"Link : \" + linkList);\n                System.out.println(\"Link : \" + linkList.size());\n                System.out.println(\"\");\n                \n                System.out.println(\"Price : \" + priceList);\n                System.out.println(\"Price : \" + priceList.size());\n                System.out.println(\"\");\n                \n                System.out.println(\"Rooms : \" + roomsList);\n                System.out.println(\"Rooms : \" + roomsList.size());\n                System.out.println(\"\");\n                \n                System.out.println(\"LivingSpace : \" + livingSpaceList);\n                System.out.println(\"LivingSpace : \" + livingSpaceList.size());\n                System.out.println(\"\");\n/*\n                System.out.println(\"Picture : \" + pictureList);\n                System.out.println(\"Picture : \" + pictureList.size());\n                System.out.println(\"\");\n*/\n\n            for( int characteristics = 0 ; characteristics < linkList.size() ; characteristics++ ){\n                insert_DB.insert(   linkList.get(characteristics) , priceList.get(characteristics) , livingSpaceList.get(characteristics) , roomsList.get(characteristics) /*, pictureList.get(characteristics)*/  );\n            }          \n\n        } catch (IOException e) {\n            // TODO: handle exception \n   }       \n}\n\n        ////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n                private void getHighestPagenumber(String line){\n\n                    Pattern pattern_pageNumber = Pattern.compile(immoNet_regex_pageNumber);\n                    Matcher matcher_pageNumber = pattern_pageNumber.matcher(line);\n                    boolean matchFound_pageNumber = matcher_pageNumber.find();\n\n                    if (matchFound_pageNumber) {\n\n                        pageNumber.add(matcher_pageNumber.group(1));\n                    }\n                }\n\n                \n                private void highestPageNumber(){ \n                    \n                    String pageNum = pageNumber.get(pageNumber.size() - 2);\n                    highestPageNumber = Integer.parseInt(pageNum);\n                    }\n   \n                // ObejctId for links (URL)\n                private void getLinks(String line){\n\n                    Pattern pattern_objectId = Pattern.compile(immoNet_regex_objectId);\n                    Matcher matcher_objectId = pattern_objectId.matcher(line);\n                    boolean matchFound_objectId = matcher_objectId.find();\n                    \n                    if (matchFound_objectId) {\n\n                        objectIdList.add(matcher_objectId.group(1));\n                    }\n                }\n\n                    \n                // CityCode for pages (href - URL)\n                private void getCityNumber(String line){\n\n                    Pattern pattern_cityCode = Pattern.compile(immoNet_regex_cityCode);\n                    Matcher matcher_cityCode = pattern_cityCode.matcher(line);\n                    boolean matchFound_cityCode = matcher_cityCode.find();\n\n                    if (matchFound_cityCode) {\n\n                        cityCode = matcher_cityCode.group(1);\n                    }\n                }\n\n\n                private void getPrice(String line){\n                \n                    Pattern pattern_price = Pattern.compile(immoNet_regex_price);\n                    Matcher matcher_price = pattern_price.matcher(line);\n                    boolean matchFound_price = matcher_price.find();\n                    \n                    if (matchFound_price) {\n\n                        priceList.add(matcher_price.group(1));\n                    }\n                }\n\n                \n                private void getAufAnfrage(String line){\n\n                    Pattern pattern_price_Auf_Anfrage = Pattern.compile(immoNet_regex_Auf_Anfrage);\n                    Matcher matcher_price_Auf_Anfrage = pattern_price_Auf_Anfrage.matcher(line);\n                    boolean matchFound_price_Auf_Anfrage = matcher_price_Auf_Anfrage.find();\n                    \n                    if (matchFound_price_Auf_Anfrage) {\n\n                        priceList.add(\" Auf Anfrage \");    \n                    }\n                }\n                    \n\n                private void getRooms(String line){\n\n                    Pattern pattern_rooms = Pattern.compile(immoNet_regex_rooms);\n                    Matcher matcher_rooms = pattern_rooms.matcher(line);\n                    boolean matchFound_rooms = matcher_rooms.find();\n\n                    if (matchFound_rooms) {\n\n                        roomsList.add(matcher_rooms.group(1));\n                    }\n                }\n\n\n                private void getSquareMeter(String line){\n\n                    Pattern pattern_squareMeter = Pattern.compile(immoNet_regex_squareMeter);\n                    Matcher matcher_squareMeter = pattern_squareMeter.matcher(line);\n                    boolean matchFound_squareMeter = matcher_squareMeter.find();\n\n                    if (matchFound_squareMeter) {\n\n                        livingSpaceList.add(matcher_squareMeter.group(1));\n                    }\n                }      \n\n                /*\n                private boolean getPictureLink_1(String line){\n\n                    Pattern pattern_pictureLink = Pattern.compile(immoNet_regex_pictureLink);\n                    Matcher matcher_pictureLink = pattern_pictureLink.matcher(line);\n                    matchFound_pictureLink = matcher_pictureLink.find();\n                    \n                    if (this.matchFound_pictureLink) {\n\n                        System.out.println(\"pictureLink_1\");\n                        \n                        pictureList.add(\"https://i.immonet.de/\"+matcher_pictureLink.group(1)+\"/\"+matcher_pictureLink.group(2)+\"/\"+matcher_pictureLink.group(3)+\"/\"+matcher_pictureLink.group(4)+\"_\"+matcher_pictureLink.group(5)+\"x\"+matcher_pictureLink.group(6)+\".jpg\");\n                    }\n                    return true;\n                }\n                \n                private void getPictureLink_2(String line){\n                    \n                    Pattern pattern_pictureLink_2 = Pattern.compile(immoNet_regex_pictureLink_2);\n                    Matcher matcher_pictureLink_2 = pattern_pictureLink_2.matcher(line);\n                    matchFound_pictureLink_2 = matcher_pictureLink_2.find();\n                    \n                    if (this.matchFound_pictureLink) {\n\n                        System.out.println(\"pictureLink_2\");\n                        \n                        pictureList.add(\"https://i.immonet.de/\"+matcher_pictureLink_2.group(1)+\"/\"+matcher_pictureLink_2.group(2)+\"/\"+matcher_pictureLink_2.group(3)+\"/\"+matcher_pictureLink_2.group(4)+\"_\"+matcher_pictureLink_2.group(5)+\"x\"+matcher_pictureLink_2.group(6)+\".jpg\");\n                    }\n                    */\n\n\n                    // Kernimplementierung for photos! Doesnt work correct beacuse of getting all pictures of one Inserat. \n/*                \n                private void getPictureLink(String line){\n\n                    Pattern pattern_pictureLink = Pattern.compile(immoNet_regex_pictureLink);\n                    Matcher matcher_pictureLink = pattern_pictureLink.matcher(line);\n                    matchFound_pictureLink = matcher_pictureLink.find();\n\n                    Pattern pattern_pictureLink_2 = Pattern.compile(immoNet_regex_pictureLink_2);\n                    Matcher matcher_pictureLink_2 = pattern_pictureLink_2.matcher(line);\n                    matchFound_pictureLink_2 = matcher_pictureLink_2.find();\n\n                    if (this.matchFound_pictureLink) {\n                        \n                        System.out.println(\"pictureLink_1\");\n                        \n                        pictureList.add(\"https://i.immonet.de/\"+matcher_pictureLink.group(1)+\"/\"+matcher_pictureLink.group(2)+\"/\"+matcher_pictureLink.group(3)+\"/\"+matcher_pictureLink.group(4)+\"_\"+matcher_pictureLink.group(5)+\"x\"+matcher_pictureLink.group(6)+\".jpg\");\n                        \n                    }\n                    else\n                    {    \n                        if (this.matchFound_pictureLink_2) {\n                            \n                            System.out.println(\"pictureLink_2\");\n\n                            pictureList.add(\"https://i.immonet.de/\"+matcher_pictureLink_2.group(1)+\"/\"+matcher_pictureLink_2.group(2)+\"/\"+matcher_pictureLink_2.group(3)+\"/\"+matcher_pictureLink_2.group(4)+\"_\"+matcher_pictureLink_2.group(5)+\"x\"+matcher_pictureLink_2.group(6)+\".jpg\");\n                            \n                        }\n\n*/\n\n\n                        /*\n                        else\n                        {\n                            pictureList.add(\"keine Bilder hinterlegt\");\n                        }\n                        */\n                    }\n\n\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/services/MainService.java","languageId":"java","version":1,"text":"package services;\n\nimport play.*;\n\nimport javax.inject.*;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.text.NumberFormat;\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FilterWriter;\nimport java.io.IOException;\n\nimport java.text.DecimalFormat;\nimport java.text.NumberFormat;\n\nimport java.util.regex.Matcher; \nimport java.util.regex.Pattern;\n\nimport java.util.Scanner;\nimport java.util.concurrent.TimeoutException;\n\nimport services.immonetService.ImmonetMainURL;\nimport models.ExposeModel;\nimport dataBase.Connection_DB;\nimport dataBase.Select_DB;\n\npublic class MainService{\n\n    public MainService(){}\n\n        public String searchRealEstateWithCityName(String cityName) throws Exception{\n\n            System.out.println(\"MainService erreicht\");\n\n            new Connection_DB().connect();\n\n            new ImmonetMainURL().useInitialURL(cityName);\n\n            return cityName;\n    }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/home/dennis/DENNIS/CODE/immoscraper_play_2.0/target/scala-2.12/zinc/inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed 08.02.2023, 19:01:54[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/setTraceNotification: JsonRpcNotificationMessage(2.0, $/setTraceNotification, {"value":"off"})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/build.sbt","languageId":"scala","version":1,"text":"name := \"\"\"immoscraper_play_2.0\"\"\"\norganization := \"immoscraper\"\n\nversion := \"1.0-SNAPSHOT\"\n\nlazy val root = (project in file(\".\")).enablePlugins(PlayJava)\n\nscalaVersion := \"2.13.8\"\n\nlibraryDependencies += guice\n\nlibraryDependencies ++= Seq(\n  javaJdbc,\n  \"org.xerial\" % \"sqlite-jdbc\" % \"3.8.6\"\n)"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/dataBase/Insert_DB.java","languageId":"java","version":1,"text":"package dataBase;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\npublic class Insert_DB {\n\n    public Insert_DB(){}\n\n\n    public Connection connect() {\n \n        String url = \"jdbc:sqlite:app/dataBase/DataBase.db\";\n        Connection conn = null;\n        try {\n            conn = DriverManager.getConnection(url);\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n        return conn;\n    }\n    \n    public void insert(String link, String price, String squareMeter, String rooms/*, String pictureLink*/) {\n        //String sql = \"INSERT INTO expose(link,price,squareMeter,rooms,pictureLink) VALUES(?,?,?,?,?)\";\n        String sql = \"INSERT INTO expose(link,price,squareMeter,rooms) VALUES(?,?,?,?)\";\n\n        try (Connection conn = this.connect();\n                PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, link);\n            pstmt.setString(2, price);\n            pstmt.setString(3, squareMeter);\n            pstmt.setString(4, rooms);\n            //pstmt.setString(5, pictureLink);\n            pstmt.executeUpdate();\n\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/dataBase/Insert_DB.java"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/dataBase/Insert_DB.java","languageId":"java","version":1,"text":"package dataBase;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\npublic class Insert_DB {\n\n    public Insert_DB(){}\n\n\n    public Connection connect() {\n \n        String url = \"jdbc:sqlite:app/dataBase/DataBase.db\";\n        Connection conn = null;\n        try {\n            conn = DriverManager.getConnection(url);\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n        return conn;\n    }\n    \n    public void insert(String link, String price, String squareMeter, String rooms/*, String pictureLink*/) {\n        //String sql = \"INSERT INTO expose(link,price,squareMeter,rooms,pictureLink) VALUES(?,?,?,?,?)\";\n        String sql = \"INSERT INTO expose(link,price,squareMeter,rooms) VALUES(?,?,?,?)\";\n\n        try (Connection conn = this.connect();\n                PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, link);\n            pstmt.setString(2, price);\n            pstmt.setString(3, squareMeter);\n            pstmt.setString(4, rooms);\n            //pstmt.setString(5, pictureLink);\n            pstmt.executeUpdate();\n\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/dataBase/Insert_DB.java"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/dataBase/Select_DB.java","languageId":"java","version":1,"text":"package dataBase;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\nimport models.ExposeModel;\n\nimport java.util.ArrayList;\n\npublic class Select_DB{\n\n    protected ArrayList<ExposeModel> exposeList;\n\n    public Select_DB(){\n\n        exposeList = new ArrayList<ExposeModel>(); \n    }\n    \n    public Connection connect() {\n\n        String url = \"jdbc:sqlite:app/dataBase/DataBase.db\";\n        Connection conn = null;\n        try {\n            conn = DriverManager.getConnection(url);\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n        return conn;\n    }\n\n\n\n    public void select() {\n    \n        try{\n        Statement stmt = connect().createStatement();\n        ResultSet resultSet = stmt.executeQuery(\"SELECT * FROM expose;\");\n\n        while(resultSet.next()){\n/*\n            System.out.println( resultSet.getString(\"link\") );\n            System.out.println( resultSet.getString(\"price\") );\n            System.out.println( resultSet.getString(\"squareMeter\") );\n            System.out.println( \" \" );\n            String link = resultSet.getString(\"link\");\n            String price = resultSet.getString(\"price\");\n            String squareMeter = resultSet.getString(\"squareMeter\");\n            \n            System.out.println(link);\n*/\n\n            //exposeList.add( new ExposeModel(link , price , squareMeter));\n\n           exposeList.add( new ExposeModel(resultSet.getString(\"link\") , resultSet.getString(\"price\") , resultSet.getString(\"squareMeter\") , resultSet.getString(\"rooms\")/* , resultSet.getString(\"pictureLink\")*/));\n            }\n        \n        resultSet.close();\n        connect().close();\n        \n\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public ArrayList getExposeList(){\n        return exposeList;\n    }\n\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/dataBase/Insert_DB.java","languageId":"java","version":1,"text":"package dataBase;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\npublic class Insert_DB {\n\n    public Insert_DB(){}\n\n\n    public Connection connect() {\n \n        String url = \"jdbc:sqlite:app/dataBase/DataBase.db\";\n        Connection conn = null;\n        try {\n            conn = DriverManager.getConnection(url);\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n        return conn;\n    }\n    \n    public void insert(String link, String price, String squareMeter, String rooms/*, String pictureLink*/) {\n        //String sql = \"INSERT INTO expose(link,price,squareMeter,rooms,pictureLink) VALUES(?,?,?,?,?)\";\n        String sql = \"INSERT INTO expose(link,price,squareMeter,rooms) VALUES(?,?,?,?)\";\n\n        try (Connection conn = this.connect();\n                PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, link);\n            pstmt.setString(2, price);\n            pstmt.setString(3, squareMeter);\n            pstmt.setString(4, rooms);\n            //pstmt.setString(5, pictureLink);\n            pstmt.executeUpdate();\n\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/dataBase/Insert_DB.java"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/dataBase/Connection_DB.java","languageId":"java","version":1,"text":"package dataBase;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class Connection_DB {\n\n    public static void connect() {\n\n       Connection conn = null;\n       \n       String url = \"jdbc:sqlite:app/dataBase/DataBase.db\";\n\n       String drop = \"DROP TABLE expose\";\n\n       String create = \"CREATE TABLE IF NOT EXISTS expose (\\n\"\n       + \"\tid integer PRIMARY KEY,\\n\"\n       + \"\tlink text NOT NULL,\\n\"\n       + \"\tprice text NOT NULL,\\n\"\n       + \"\tsquareMeter text NOT NULL,\\n\"\n       + \"\trooms text NOT NULL\\n\"\n       //+ \"\tpictureLink text NOT NULL\\n\"\n       + \");\";\n\n       \n       \n       try {\n       \n           conn = DriverManager.getConnection(url);\n           Statement stmt = conn.createStatement();\n           \n           stmt.execute(drop);\n           stmt.execute(create);\n\n           System.out.println(\"Datenbankverbindung laeuft.\");\n           \n       } catch (SQLException e) {\n           System.out.println(e.getMessage());\n       } finally {\n           try {\n               if (conn != null) {\n                   conn.close();\n               }\n           } catch (SQLException ex) {\n               System.out.println(ex.getMessage());\n           }\n       }\n   }\n\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/models/ExposeModel.java","languageId":"java","version":1,"text":"package models;\n\nimport java.util.ArrayList;\nimport java.io.Serializable;\n\n\n// Klassen nicht auf public setzen\npublic class ExposeModel{\n\n// private getter to implement\n /* public String headLine;\n\n    public String area;\n\n    public String shortDiscription;  \n\n    public float averagePrice;\n    */\n    public String link;\n\n    public String price;\n\n    public String squareMeter;\n    \n    public String rooms;\n\n    //public String pictureLink;\n\n    //public String pictureLink_2;\n\n    // SICHER ??\n    //private static ArrayList<ExposeModel> exposes;\n\n\n    public ExposeModel( /* String headLine, String area, String shortDiscription, float averagePrice */ String link, String price , String squareMeter , String rooms/* , String pictureLink*/ ){\n        \n        this.price = price;\n        this.squareMeter = squareMeter; \n        this.link = link;\n        this.rooms = rooms;\n        \n        //this.pictureLink = pictureLink;\n\n\n        //this.pictureLink_2 = pictureLink_2;\n        /*\n        this.rooms = rooms;\n        this.headLine = headLine;\n        this.area = area;\n        this.shortDiscription = shortDiscription;\n        this.averagePrice = averagePrice;\n        */\n    }\n\n    // Getter //\n    public String getPrice(){\n\n        return price;\n    }\n\n    public String getLivingSpace(){\n       \n        return squareMeter;\n    }\n\n    public String getLink(){\n        \n        return link;\n    }\n\n    public String getRooms(){\n        \n        return rooms;\n    }\n\n/*\n    public String getPictureLink(){\n        \n        return pictureLink;\n    }\n\n\npublic String getPictureLink_2(){\n        \n        return pictureLink_2;\n    }\n    \n    public String getHeadLine(){\n        return headLine;\n    }\n\n    public String getArea(){\n        return area;\n        }\n\n    public String getShortDiscription(){\n        return shortDiscription;\n    }\n\n    public double getRent(){\n        return rent;\n    }\n\n\n\n    public float getAveragePrice(){\n        return averagePrice;\n    }\n*/\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/app/services/MainService.java"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/dennis/DENNIS/CODE/immoscraper_play_2.0/immoscraper_play_2.0/build.sbt"}})[0m
